name: release

on:
  push:
    tags:
      - '*'

# env:
#   # update with the name of the main binary
#   binary: web
#   add_binaries_to_github_release: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: cargo build
      - run: pwd

      # - run: rustup target add x86_64-unknown-linux-musl
      - run: cargo install --path thepipelinetool --root .

      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./bin/tpt
          asset_name: tpt
          tag: ${{ steps.get_version.outputs.tag }}
          overwrite: true

  server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: server.Dockerfile
          push: true
          build-args: |
            VERSION=${{ steps.get_version.outputs.tag }}
          platforms: linux/amd64, linux/arm64
          tags: ghcr.io/thepipelinetool/server:latest, ghcr.io/thepipelinetool/server:${{ steps.get_version.outputs.tag }}
          cache-from: type=registry,ref=ghcr.io/thepipelinetool/server:buildcache
          cache-to: type=registry,ref=ghcr.io/thepipelinetool/server:buildcache,mode=max
  worker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: worker.Dockerfile
          push: true
          build-args: |
            VERSION=${{ steps.get_version.outputs.tag }}
          platforms: linux/amd64, linux/arm64
          tags: ghcr.io/thepipelinetool/worker:latest, ghcr.io/thepipelinetool/worker:${{ steps.get_version.outputs.tag }}
          cache-from: type=registry,ref=ghcr.io/thepipelinetool/worker:buildcache
          cache-to: type=registry,ref=ghcr.io/thepipelinetool/worker:buildcache,mode=max
  # web:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: thepipelinetool_ui        
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: subosito/flutter-action@v2
  #       with:
  #         channel: 'beta' # or: 'beta', 'dev' or 'master'
  #         cache: true
  #         cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:' # optional, change this to force refresh cache
  #         cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:' # optional, change this to specify the cache path
  #         architecture: x64 # optional, x64 or arm64
  #     - run: flutter --version
  #     - run: flutter pub get
  #     - run: flutter build web --release

  #     - name: Package as a zip
  #       working-directory: ./build/web
  #       run: |
  #         zip --recurse-paths ../../${{ env.binary }}.zip .

  #     - name: Upload binaries to artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         path: ${{ env.binary }}.zip
  #         name: web

  #     - name: set release date
  #       run: |
  #         echo "RELEASE_DATE=$(date --rfc-3339=date)" >> ${GITHUB_ENV}


  #     - uses: little-core-labs/get-git-tag@v3.0.1
  #       id: get_version

  #     - name: Upload binaries to release
  #       if: ${{ env.add_binaries_to_github_release == 'true' }}
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: ${{ env.binary }}.zip
  #         asset_name: ${{ env.binary }}.zip
  #         tag: ${{ steps.get_version.outputs.tag }}
  #         overwrite: true